from fastapi import FastAPI, Request, Form
from fastapi.responses import HTMLResponse
from jinja2 import Template

app = FastAPI()

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –∏ –∏—Ö –æ–ø–∏—Å–∞–Ω–∏—è
score_descriptions = {
    "Data Analyst": {
        "weight": 10,
        0: "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏.",
        1: "–ê–Ω–∞–ª–∏—Ç–∏–∫–∏ –µ—Å—Ç—å, –Ω–æ –∑–∞–Ω–∏–º–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ—Ç—á–µ—Ç–∞–º–∏.",
        2: "–ê–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–∞—é—Ç –∏–Ω—Å–∞–π—Ç—ã, –Ω–æ –Ω–µ —É—á–∞—Å—Ç–≤—É—é—Ç –≤ –ø—Ä–∏–Ω—è—Ç–∏–∏ —Ä–µ—à–µ–Ω–∏–π.",
        3: "–ê–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç A/B —Ç–µ—Å—Ç—ã –≥–ª—É–±–æ–∫–∏–º –∞–Ω–∞–ª–∏–∑–æ–º.",
        4: "–ê–Ω–∞–ª–∏—Ç–∏–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö."
    },
    "Data Engineer": {
        "weight": 10,
        0: "–ù–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–Ω—ã—Ö –∏–Ω–∂–µ–Ω–µ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö.",
        1: "–ò–Ω–∂–µ–Ω–µ—Ä—ã –µ—Å—Ç—å, –Ω–æ –Ω–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.",
        2: "–ï—Å—Ç—å –±–∞–∑–æ–≤—ã–µ, –Ω–æ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –∫–æ–Ω–≤–µ–π–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö.",
        3: "–í—ã—Å—Ç—Ä–æ–µ–Ω–∞ –Ω–∞–¥–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.",
        4: "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–µ–π –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º."
    },
    "A/B Tests Run": {
        "weight": 8,
        0: "–¢–µ—Å—Ç—ã –Ω–µ –∑–∞–ø—É—Å–∫–∞—é—Ç—Å—è.",
        1: "–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è 1-2 —Ç–µ—Å—Ç–∞ –≤ –≥–æ–¥.",
        2: "–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –¥–æ 5 —Ç–µ—Å—Ç–æ–≤ –≤ –≥–æ–¥.",
        3: "–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –±–æ–ª–µ–µ 10 —Ç–µ—Å—Ç–æ–≤ –≤ –≥–æ–¥.",
        4: "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ - —á–∞—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç–æ–≤–æ–π –∫—É–ª—å—Ç—É—Ä—ã."
    },
    "Test Automation": {
        "weight": 8,
        0: "–ü–æ–ª–Ω–æ—Å—Ç—å—é —Ä—É—á–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å.",
        1: "–ß–∞—Å—Ç–∏—á–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤.",
        2: "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω –∑–∞–ø—É—Å–∫, –Ω–æ –Ω–µ –∞–Ω–∞–ª–∏–∑.",
        3: "–ü–æ–ª–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –æ—Ç –∑–∞–ø—É—Å–∫–∞ –¥–æ –∞–Ω–∞–ª–∏–∑–∞.",
        4: "–¢–µ—Å—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–∞–∫ —á–∞—Å—Ç—å CI/CD."
    },
    "Test Completion": {
        "weight": 6,
        0: "–ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤ –æ—Å—Ç–∞—é—Ç—Å—è –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º–∏.",
        1: "–ó–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è –º–µ–Ω–µ–µ 25% —Ç–µ—Å—Ç–æ–≤.",
        2: "–ó–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è 50% —Ç–µ—Å—Ç–æ–≤.",
        3: "–ó–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è –±–æ–ª–µ–µ 75% —Ç–µ—Å—Ç–æ–≤.",
        4: "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ 100% —Ç–µ—Å—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è –≤ —Å—Ä–æ–∫."
    },
    "Decision Making Based on Tests": {
        "weight": 8,
        0: "–†–µ—à–µ–Ω–∏—è –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è –±–µ–∑ —Ç–µ—Å—Ç–æ–≤.",
        1: "–¢–æ–ª—å–∫–æ 10% —Ä–µ—à–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ—Å—Ç–æ–≤.",
        2: "–î–æ 30% —Ä–µ—à–µ–Ω–∏–π –æ—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ —Ç–µ—Å—Ç–∞—Ö.",
        3: "–ë–æ–ª–µ–µ 50% —Ä–µ—à–µ–Ω–∏–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º —Ç–µ—Å—Ç–æ–≤.",
        4: "–í—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–µ—Å—Ç–æ–≤."
    },
    "Trust in Data": {
        "weight": 10,
        0: "–î–∞–Ω–Ω—ã–º –Ω–µ –¥–æ–≤–µ—Ä—è—é—Ç.",
        1: "–î–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è, –Ω–æ –µ—Å—Ç—å —Å–æ–º–Ω–µ–Ω–∏—è.",
        2: "–î–∞–Ω–Ω—ã–µ –≤–ª–∏—è—é—Ç –Ω–∞ —Ä–µ—à–µ–Ω–∏—è, –Ω–æ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∏–º–∏.",
        3: "C-Level –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ, –Ω–æ –Ω–µ –ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –Ω–∞ –Ω–∏—Ö –ø–æ–ª–Ω–æ—Å—Ç—å—é.",
        4: "–î–∞–Ω–Ω—ã–µ —è–≤–ª—è—é—Ç—Å—è –æ—Å–Ω–æ–≤–æ–π –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏—Ö —Ä–µ—à–µ–Ω–∏–π."
    },
    "Data Collection and Storage": {
        "weight": 10,
        0: "–î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–±–∏—Ä–∞—é—Ç—Å—è.",
        1: "–î–∞–Ω–Ω—ã–µ —Å–æ–±–∏—Ä–∞—é—Ç—Å—è —ç–ø–∏–∑–æ–¥–∏—á–µ—Å–∫–∏ –∏ —Ä–∞–∑—Ä–æ–∑–Ω–µ–Ω—ã.",
        2: "–î–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã, –Ω–æ –µ—Å—Ç—å –æ—à–∏–±–∫–∏.",
        3: "–î–∞–Ω–Ω—ã–µ —Å–æ–±–∏—Ä–∞—é—Ç—Å—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ, –Ω–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫.",
        4: "–î–∞–Ω–Ω—ã–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞–¥–µ–∂–Ω—ã –∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏."
    }
}

html_template = """<html><head><title>A/B Testing Maturity</title></head><body>
<h1>A/B Testing Maturity Calculator</h1>
<form action="/" method="post">
    {% for metric, desc in score_descriptions.items() %}
        <label><b>{{ metric }}:</b></label><br>
        {% for score in range(5) %}
            <input type="radio" name="{{ metric }}" value="{{ score }}" required> {{ score }} - {{ desc[score] }}<br>
        {% endfor %}
    {% endfor %}
    <button type="submit">Calculate</button>
</form>
{% if result %}
<h2>Score: {{ result["score"] }}%</h2>
<p>Level: {{ result["level"] }}</p>
<h3>Recommendations:</h3>
<ul>
    {% for metric, value in result["details"].items() %}
        {% if value <= 1 %}
            <li><b>{{ metric }}</b>: –°—Ä–æ—á–Ω–æ —É–ª—É—á—à–∏—Ç—å! –≠—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–ª–∞–±–æ–µ –º–µ—Å—Ç–æ.</li>
        {% elif value == 2 %}
            <li><b>{{ metric }}</b>: –í–∞–∂–Ω–æ –ø—Ä–æ—Ä–∞–±–æ—Ç–∞—Ç—å –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.</li>
        {% elif value == 3 %}
            <li><b>{{ metric }}</b>: –£–∂–µ —Ö–æ—Ä–æ—à–æ, –Ω–æ –º–æ–∂–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å.</li>
        {% endif %}
    {% endfor %}
</ul>
{% endif %}
</body></html>"""

@app.get("/", response_class=HTMLResponse)
async def form():
    return Template(html_template).render(score_descriptions=score_descriptions)

@app.post("/", response_class=HTMLResponse)
async def calculate(request: Request):
    form_data = await request.form()
    scores = {key: int(form_data[key]) for key in form_data if key in score_descriptions}

    total_weight = sum(desc["weight"] for desc in score_descriptions.values())
    weighted_score = sum(scores[k] * score_descriptions[k]["weight"] for k in scores)
    
    penalty_factor = 1
    for value in scores.values():
        if value <= 1:
            penalty_factor *= 0.9
    
    final_score = ((weighted_score / total_weight) * 100) * penalty_factor
    level = "üõë Standing Still" if final_score < 20 else "üê¢ Crawling" if final_score < 40 else "üö∂ Walking" if final_score < 60 else "üèÉ Running" if final_score < 80 else "üöÄ Flying"

    result = {"score": round(final_score, 2), "level": level, "details": scores}
    return Template(html_template).render(score_descriptions=score_descriptions, result=result)